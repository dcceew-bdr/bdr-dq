assess_coordinate_completeness

-------------------------------------------------------
PREFIX tern: <http://example.com/tern#>
PREFIX sosa: <http://www.w3.org/ns/sosa/>
PREFIX geo: <http://www.opengis.net/ont/geosparql#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

SELECT ?observation ?wkt 
       (IF(BOUND(?wkt) && STRLEN(STR(?wkt)) > 0, "non_empty", "empty") AS ?completeness)
       (IF(BOUND(?wkt) && STRLEN(STR(?wkt)) > 0,
           REPLACE(?wkt, "^POINT \\(([^ ]+) ([^ ]+)\\)$", "$1, $2"),
           "0, 0") AS ?location)
WHERE {
  ?observation a tern:Observation .
  ?observation sosa:hasFeatureOfInterest ?sample .
  ?sample a tern:Sample .
  ?sample sosa:isResultOf ?procedure .
  ?procedure geo:hasGeometry ?geometry .
  OPTIONAL { ?geometry geo:asWKT ?wkt . }
}
-------------------------------------------------------





assess_coordinate_precision

-------------------------------------------------------
PREFIX tern: <http://example.com/tern#>
PREFIX sosa: <http://www.w3.org/ns/sosa/>
PREFIX geo: <http://www.opengis.net/ont/geosparql#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

SELECT ?observation ?wkt ?precision ?lonPrecision ?latPrecision ?lonStr ?latStr
WHERE {
  ?observation a tern:Observation .
  ?observation sosa:hasFeatureOfInterest ?sample .
  ?sample a tern:Sample .
  ?sample sosa:isResultOf ?procedure .
  ?procedure geo:hasGeometry ?geometry .
  ?geometry geo:asWKT ?wkt .
  
  # Extract longitude and latitude strings using a regular expression
  BIND(REPLACE(?wkt, "^POINT \\(([-+]?\\d+\\.\\d+)[ ]+([-+]?\\d+\\.\\d+)\\)$", "$1") AS ?lonStr)
  BIND(REPLACE(?wkt, "^POINT \\(([-+]?\\d+\\.\\d+)[ ]+([-+]?\\d+\\.\\d+)\\)$", "$2") AS ?latStr)
  
  # Extract the decimal parts from the coordinate strings
  BIND(STRAFTER(?lonStr, ".") AS ?lonDec)
  BIND(STRAFTER(?latStr, ".") AS ?latDec)
  
  # Determine the number of digits after the decimal point
  BIND(STRLEN(?lonDec) AS ?lonPrecision)
  BIND(STRLEN(?latDec) AS ?latPrecision)
  
  # Assign a precision level:
  # - "High" if both lon and lat have >4 decimals
  # - "Low" if either has <2 decimals
  # - Otherwise "Medium"
  BIND(
    IF( (xsd:integer(?lonPrecision) > 4 && xsd:integer(?latPrecision) > 4),
        "High",
        IF( (xsd:integer(?lonPrecision) < 2 || xsd:integer(?latPrecision) < 2),
            "Low",
            "Medium"
        )
    ) AS ?precision
  )
}
-------------------------------------------------------





assess_coordinate_unusual

-------------------------------------------------------
PREFIX tern: <http://example.com/tern#>
PREFIX sosa: <http://www.w3.org/ns/sosa/>
PREFIX geo: <http://www.opengis.net/ont/geosparql#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

SELECT ?observation ?wkt 
       (IF((REGEX(?lonDec, "([0-9])\\1\\1") || REGEX(?latDec, "([0-9])\\1\\1")),
           "unusual", "usual") AS ?coordinateUnusual)
       ?lonStr ?latStr ?lonDec ?latDec
WHERE {
  ?observation a tern:Observation .
  ?observation sosa:hasFeatureOfInterest ?sample .
  ?sample a tern:Sample .
  ?sample sosa:isResultOf ?procedure .
  ?procedure geo:hasGeometry ?geometry .
  ?geometry geo:asWKT ?wkt .

  # Extract longitude and latitude as strings from a WKT literal formatted as "POINT (lon lat)"
  BIND(REPLACE(?wkt, "^POINT \\(([-+]?\\d+\\.\\d+)[ ]+([-+]?\\d+\\.\\d+)\\)$", "$1") AS ?lonStr)
  BIND(REPLACE(?wkt, "^POINT \\(([-+]?\\d+\\.\\d+)[ ]+([-+]?\\d+\\.\\d+)\\)$", "$2") AS ?latStr)

  # Extract the decimal parts (everything after the dot)
  BIND(STRAFTER(?lonStr, ".") AS ?lonDec)
  BIND(STRAFTER(?latStr, ".") AS ?latDec)
}
-------------------------------------------------------




assess_date_completeness

-------------------------------------------------------
PREFIX tern: <http://example.com/tern#>
PREFIX time: <http://www.w3.org/2006/time#>

SELECT ?observation 
       (IF(BOUND(?dateLiteral) && STRLEN(STR(?dateLiteral)) > 0, "non_empty", "empty") AS ?dateCompleteness)
WHERE {
  ?observation a tern:Observation .
  ?observation time:hasTime ?timeNode .
  OPTIONAL {
    ?timeNode time:inXSDgYear ?dateLiteral .
  }
}
-------------------------------------------------------





assess_date_format_validation
-------------------------------------------------------
PREFIX sosa: <http://www.w3.org/ns/sosa/>
PREFIX time: <http://www.w3.org/2006/time#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?observation ?dateLiteral 
       (IF(REGEX(?dateStr, "^[0-9]{4}-[0-9]{2}-[0-9]{2}$"), "valid", "invalid") AS ?dateFormatValidation)
WHERE {
  ?observation sosa:phenomenonTime ?timeNode .
  ?timeNode time:inXSDDateTimeStamp ?dateLiteral .
  ?observation rdfs:comment ?comment .
  FILTER(CONTAINS(STR(?comment), "NSL name match Observation"))
  
  # Extract the first 10 characters (expected to be in "YYYY-MM-DD" format)
  BIND(SUBSTR(STR(?dateLiteral), 1, 10) AS ?dateStr)
}
-------------------------------------------------------





assess_date_recency
-------------------------------------------------------
PREFIX tern: <http://example.com/tern#>
PREFIX sosa: <http://www.w3.org/ns/sosa/>
PREFIX time: <http://www.w3.org/2006/time#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

SELECT ?observation ?date 
       (IF(?dateValue >= "2005-01-01"^^xsd:date, "recent_20_years", "outdated_20_years") AS ?dateRecency)
WHERE {
  ?observation a tern:Observation .
  ?observation sosa:hasFeatureOfInterest ?sample .
  ?sample a tern:Sample .
  ?sample sosa:isResultOf ?procedure .
  ?procedure time:hasTime ?ot .
  ?ot time:inXSDgYear ?date .
  
  # Cast the date literal to xsd:date for comparison
  BIND(xsd:date(?date) AS ?dateValue)
}
-------------------------------------------------------




assess_scientific_name_validation

-------------------------------------------------------
PREFIX tern: <http://example.com/tern#>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?feature ?name 
       (IF(BOUND(?name) && REGEX(STR(?name), "^[A-Z][a-z]+\\s[a-z]+"), "valid_name", "invalid_name") AS ?nameValidation)
WHERE {
  ?feature a tern:FeatureOfInterest .
  OPTIONAL { ?feature rdf:value ?name . }
}
-------------------------------------------------------
