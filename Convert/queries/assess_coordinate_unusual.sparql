# ====================================================================================
# Coordinate Unusual
# Identifies if coordinates have repeating decimal digit or number patterns.
# Examples:
# - 111.111111 → "unusual"
# - 123.123123 → "unusual"
# - 147.893 → "usual"
# ====================================================================================

PREFIX tern:   <https://w3id.org/tern/ontologies/tern/>
PREFIX sosa:   <http://www.w3.org/ns/sosa/>
PREFIX geo:    <http://www.opengis.net/ont/geosparql#>
PREFIX dqaf:   <http://example.com/def/dqaf/>
PREFIX schema: <http://schema.org/>

INSERT {
  GRAPH dqaf:fullResults {
    ?observation dqaf:hasResult [
      sosa:observedProperty <http://example.com/assess/coordinate_unusual/> ;
      schema:value ?coordinate_unusual
    ]
  }
}
WHERE {
  ?observation a tern:Observation ;
               sosa:hasFeatureOfInterest ?sample .
  ?sample a tern:Sample ;
          sosa:isResultOf ?procedure .
  ?procedure geo:hasGeometry ?geometry .
  ?geometry geo:asWKT ?wkt .

  # === Parse WKT and extract lon/lat strings ===
  BIND(STR(?wkt) AS ?wktStr)
  BIND(STRBEFORE(STRAFTER(?wktStr, "POINT("), ")") AS ?coords)
  BIND(STRBEFORE(?coords, " ") AS ?lonStr)
  BIND(STRAFTER(?coords, " ") AS ?latStr)

  # === Get decimal parts ===
  BIND(STRAFTER(?lonStr, ".") AS ?lonDec)
  BIND(STRAFTER(?latStr, ".") AS ?latDec)

  # === Detect unusual coordinate values ===
  BIND(
    IF(
      REGEX(?lonDec, "([0-9]{1,3})\\1{2,}") || REGEX(?latDec, "([0-9]{1,3})\\1{2,}"),
      "unusual",
      "usual"
    ) AS ?coordinate_unusual
  )
}
